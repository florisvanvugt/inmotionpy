

"""

What this will do is read robdecls.h and output a list of variables that we probably
want to be able to access through shared memory. For these variables, we write an on-the-fly C script
that will tell us the addresses of each item.

"""

import re


def comment_remover(text):
    """ Source: http://stackoverflow.com/questions/241327/python-snippet-to-remove-c-and-c-comments """
    import re
    def replacer(match):
        s = match.group(0)
        if s.startswith('/'):
            return " " # note: a space and not an empty string
        else:
            return s
    pattern = re.compile(
        r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
        re.DOTALL | re.MULTILINE
    )
    return re.sub(pattern, replacer, text)    



def parse_robdecls():
    """ 
    Now we need to know where C stores its stuff...
    """
    f = open('../robot/robdecls.h','r')
    robdecls = f.read()
    f.close()

    purec = comment_remover(robdecls)


    td = re.compile(r'typedef\s*struct\s*(\w+)\s*{([^}]*)}\s*(\w+);')
    matchs = td.findall(purec)
    structs = {}
    for match in matchs:
        obname = match[-1]
        obcont = match[1]

        contents = [ itm.strip() for itm in obcont.split(";") ]

        vrs = []
        for cont in contents:
            if len(cont)>0:
                fields = cont.split(' ')
                if len(fields)!=2:
                    print("// ERROR parsing %s"%cont)
                else:
                    vrs.append(tuple(fields))
        structs[obname]=vrs
    
    return structs








print ("// DO NOT EDIT -- TEMPORARY C File generated by parse_robdecls.py\n")
print ("")
print ("""
#include <stdlib.h>
#include <signal.h>
#include "ruser.h"
#include "rtl_inc.h"
#include "userdecls.h"
#include "robdecls.h"\n\n
""")

typedefs = parse_robdecls()

objects_of_interest = [ "Ob",
                        #"Rob",
                        #"Daq",
                        "Game",
                        #"Moh",
                        "Dyncmp_var" ]

for typedef in objects_of_interest:
    print ("%s *%s;\n"%(typedef,typedef.lower()))

print("\n\ns32 main(void) {\n")
    
for typedef in objects_of_interest:

    varname = typedef.lower()
    for (tp,name) in typedefs[typedef]:
        #print(typedef,name)
        #printf("\nAddress of ob->fvv_trial_phase = %u", &ob->fvv_trial_phase );

        if name.find('[')==-1 and name.find('*')==-1:
            #print('\tprintf("Address of %s = %%u\\n", &%s->%s );'%(name,varname,name))
            print('\tprintf("%s %s %s %%u\\n", &%s->%s );'%(typedef,tp,name,varname,name))

print("\treturn 0;\n}\n\n")
        
#res["xy"]

